const directions = ['ArrowUp', 'ArrowDown', 'ArrowLeft', 'ArrowRight'];
const countdownElement = document.getElementById('countdown');
const messageElement = document.getElementById('message');
const endMessageElement = document.getElementById('endMessage');
const continueButton = document.getElementById('continueButton');
const replayButton = document.getElementById('replayButton');
const endGameMessage = document.getElementById('endGameMessage');
const questionElement = document.getElementById('question');
const choicesElement = document.getElementById('choices');
const submitAnswerButton = document.getElementById('submitAnswerButton');
const questionContainer = document.getElementById('questionContainer');

let score = 0;
let timeLeft = 2.5;
let currentRound = 0;
let currentLevel = 1;
let randomDirection = '';
let lastDirection = '';
let countdownInterval;
let isQuestionActive = false;

const levelRounds = [3, 4, 5];
const questions = [
    [
        { question: "What should you do if you encounter severe turbulence?", choices: ["Increase altitude", "Decrease altitude", "Maintain current altitude"], answer: "Maintain current altitude", explanation: "Maintaining altitude prevents additional stress on the aircraft." },
        { question: "What is the first step if you experience an engine failure?", choices: ["Declare an emergency", "Try to restart the engine", "Descend immediately"], answer: "Declare an emergency", explanation: "Declaring an emergency ensures ATC is aware and can assist." },
        { question: "What should you do if you lose communication with ATC?", choices: ["Continue on your flight plan", "Turn back to the departure airport", "Squawk 7600"], answer: "Squawk 7600", explanation: "Squawking 7600 informs ATC of a radio communication failure." }
    ],
    [
        { question: "What is the purpose of the black box on an airplane?", choices: ["Record flight data", "Store passenger information", "Control the autopilot"], answer: "Record flight data", explanation: "The black box records flight data and cockpit conversations to help investigators understand the cause of an accident." },
        { question: "What should you do if there's a fire on the plane?", choices: ["Use extinguisher", "Run away", "Shout for help"], answer: "Use extinguisher", explanation: "Using a fire extinguisher is the most effective way to control and extinguish a fire on the plane." },
        { question: "What is the primary function of the flaps on an airplane?", choices: ["Increase lift", "Decrease drag", "Control altitude"], answer: "Increase lift", explanation: "Flaps increase the lift generated by the wings, allowing the airplane to take off and land at lower speeds." }
    ],
    [
        { question: "What should you do if you encounter severe turbulence?", choices: ["Increase altitude", "Decrease altitude", "Maintain current altitude"], answer: "Maintain current altitude", explanation: "Maintaining altitude prevents additional stress on the aircraft." },
        { question: "What is the first step if you experience an engine failure?", choices: ["Declare an emergency", "Try to restart the engine", "Descend immediately"], answer: "Declare an emergency", explanation: "Declaring an emergency ensures ATC is aware and can assist." },
        { question: "What should you do if you lose communication with ATC?", choices: ["Continue on your flight plan", "Turn back to the departure airport", "Squawk 7600"], answer: "Squawk 7600", explanation: "Squawking 7600 informs ATC of a radio communication failure." }
    ]
];

function startRound() {
    console.log(`Starting round ${currentRound + 1} of level ${currentLevel}`);
    if (currentRound >= levelRounds[currentLevel - 1]) {
        if (currentLevel < 3) {
            currentLevel++;
            currentRound = 0;
            score = 0;
            messageElement.textContent = `Level ${currentLevel} - Get ready!`;
            setTimeout(startRound, 2000);
        } else {
            endGame(`Congratulations! You reached your destination!`);
        }
        return;
    }

    do {
        randomDirection = directions[Math.floor(Math.random() * directions.length)];
    } while (randomDirection === lastDirection);
    lastDirection = randomDirection;

    messageElement.textContent = `Press ${randomDirection.replace('Arrow', '').toUpperCase()}!`;

    timeLeft = 2.5 - (currentLevel - 1) * 0.75;
    countdownElement.textContent = `Countdown: ${timeLeft.toFixed(1)}`;
    currentRound++;

    countdownInterval = setInterval(() => {
        timeLeft -= 0.1;
        countdownElement.textContent = `Countdown: ${timeLeft.toFixed(1)}`;

        if (timeLeft <= 0) {
            clearInterval(countdownInterval);
            endGame(`Time's up! You missed ${randomDirection.replace('Arrow', '').toUpperCase()}.`);
        }
    }, 100);
}

document.addEventListener('keydown', (event) => {
    if (isQuestionActive) return;

    const key = event.key;
    if (directions.includes(key)) {
        if (key === randomDirection) {
            clearInterval(countdownInterval);
            score++;
            console.log(`Score: ${score}`);
            if (score >= levelRounds[currentLevel - 1]) {
                askQuestion();
            } else {
                messageElement.textContent = `Great! ${score}/${levelRounds[currentLevel - 1]} correct.`;
                setTimeout(startRound, 1000);
            }
        } else {
            clearInterval(countdownInterval);
            endGame(`Wrong key! You pressed ${key.replace('Arrow', '').toUpperCase()}.`);
        }
    }
});

function askQuestion() {
    isQuestionActive = true;

    countdownElement.style.display = 'none';
    messageElement.style.display = 'none';

    document.getElementById('up').style.display = 'none';
    document.getElementById('down').style.display = 'none';
    document.getElementById('left').style.display = 'none';
    document.getElementById('right').style.display = 'none';

    const currentQuestion = questions[currentLevel - 1][Math.floor(Math.random() * questions[currentLevel - 1].length)];
    questionElement.textContent = currentQuestion.question;
    choicesElement.innerHTML = '';

    currentQuestion.choices.forEach(choice => {
        const choiceElement = document.createElement('div');
        choiceElement.innerHTML = `<input type="radio" name="choice" value="${choice}"> ${choice}`;
        choicesElement.appendChild(choiceElement);
    });

    questionContainer.style.display = 'block';

    submitAnswerButton.onclick = () => {
        const selectedChoice = document.querySelector('input[name="choice"]:checked');
        if (selectedChoice) {
            questionContainer.style.display = 'none';
            endMessageElement.textContent = selectedChoice.value === currentQuestion.answer
                ? `Correct! ${currentQuestion.explanation}`
                : `Wrong! The correct answer was "${currentQuestion.answer}". ${currentQuestion.explanation}`;
            endGameMessage.style.display = 'block';

            if (selectedChoice.value === currentQuestion.answer) {
                continueButton.textContent = "Next";
                continueButton.style.display = 'inline-block';
                continueButton.onclick = () => {
                    endGameMessage.style.display = 'none';
                    continueButton.style.display = 'none';
                    isQuestionActive = false;
                    countdownElement.style.display = 'block';
                    messageElement.style.display = 'block';
                    document.getElementById('up').style.display = 'inline-block';
                    document.getElementById('down').style.display = 'inline-block';
                    document.getElementById('left').style.display = 'inline-block';
                    document.getElementById('right').style.display = 'inline-block';
                    startRound();
                };
            } else {
                replayButton.style.display = 'inline-block';
                replayButton.onclick = () => {
                    window.location.reload();
                };
            }
        } else {
            messageElement.textContent = "Please select an answer before proceeding.";
        }
    };
}

function endGame(message) {
    console.log("Ending game with message:", message);

    document.getElementById('controls').style.display = 'none';
    countdownElement.style.display = 'none';
    messageElement.style.display = 'none';
    questionContainer.style.display = 'none';

    endMessageElement.textContent = message;
    endGameMessage.style.display = 'block';
    replayButton.style.display = 'inline-block';
    if (currentLevel === 3) {
        continueButton.textContent = "Home";
        continueButton.style.display = 'inline-block';
    }
    else {
        continueButton.style.display = 'none';
    }
    replayButton.onclick = () => window.location.reload();

    continueButton.onclick = () => {
        window.location.href = '/';
    };
}


setTimeout(() => {
    console.log("This is after 2 seconds.");
    startRound();
}, 2000);
